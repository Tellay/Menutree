generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String       @id @default(cuid())
  name                String?
  email               String?      @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  restaurants         Restaurant[]
  favoriteRestaurants Restaurant[] @relation("FavoriteRestaurants")
}

model Restaurant {
  id            String   @id @default(cuid())
  name          String
  description   String   @db.VarChar(255)
  image         String?
  rating        Float    @default(0)
  totalReviews  Int      @default(0)
  totalVisits   Int      @default(0)
  instagramUrl  String?
  facebookUrl   String?
  tiktokUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdById   String
  meals         Meal[]
  favoriteUsers User[]   @relation("FavoriteRestaurants")
}

model Meal {
  id           String     @id @default(cuid())
  name         String
  description  String     @db.VarChar(255)
  price        Float
  image        String?
  rating       Float      @default(0)
  totalReviews Int        @default(0)
  published    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}
